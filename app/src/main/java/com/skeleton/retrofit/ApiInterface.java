package com.skeleton.retrofit;


import com.skeleton.modal.signupResponse.TheResponse;
import com.skeleton.modal.signupResponse.updateuserprof.UpdateProfileResponse;
import com.skeleton.modal.signupResponse.userprofile.Response;
import com.skeleton.modal.signupResponse.userproftwo.Categories;

import java.util.HashMap;

import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.http.Field;
import retrofit2.http.FieldMap;
import retrofit2.http.FormUrlEncoded;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Multipart;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.PartMap;

import static com.skeleton.constant.ApiKeyConstant.AUTHORIZATION;

/**
 * Developer: Saurabh Verma
 * Dated: 27-09-2016.
 */
public interface ApiInterface {
    String UPDATE_LOCATION = "api/v1/user/updateLocation";
    String USER_INFO = "users";
    String POST_HIT = "posts";
    String USERS = "api/users";
    String REGISTER = "api/user/register";
    String LOGIN = "api/user/login";
    String GET_PROFILE = "/api/user/getProfile";
    String VERIFY_OTP = "api/user/verifyOTP";
    String RESEND_OTP = "/api/user/resendOTP";
    String PROFILE_CONSTANTS = "api/TheResponse/constants";
    String SKIP_STEP = "api/user/skipStep ";
    String CATEGORY_LIST = "api/category/list";
    String UPDATE_PROFILE = "api/user/updateProfile";


    //    /**
//     * @param map
//     * @return
//     */

    /**
     * @param map the map
     * @return the call
     */
    @Multipart
    @POST(REGISTER)
    Call<TheResponse> register(@PartMap HashMap<String, RequestBody> map);
//

    /**
     * call for user signup
     *
     * @param authorization authetication
     * @return the call
     */
    @GET(GET_PROFILE)
    Call<TheResponse> getProfile(@Header(AUTHORIZATION) String authorization);
//    /**
//     * @param map
//     * @param authorization authenticate
//     * @return TheResponse
//     */
//    @FormUrlEncoded
//    @PUT("api/v1/user/socialLogin")
//    Call<LoginResponse> socialLogin(@FieldMap HashMap<String, String> map);
//
//    /**
//     * @param authorization authenticate
//     * @param map
//     * @return
//     */
//    @FormUrlEncoded
//    @PUT("api/v1/user/loginToken")
//    Call<LoginResponse> accessTokenLogin(@Header(AUTHORIZATION) String authorization,
//                                         @FieldMap HashMap<String, String> map);
    /**
     * @param authorization authorization
     * @param map           map
     * @return return
     */
    @Multipart
    @PUT(UPDATE_PROFILE)
    Call<UpdateProfileResponse> updateProfile(@Header(AUTHORIZATION) String authorization, @PartMap HashMap<String, RequestBody> map);

//
//    /**
//     * @param email
//     * @return
//     */
//    @FormUrlEncoded
//    @POST("api/v1/user/forgotpassword")
//    Call<CommonResponse> forgotPassword(@Field("email") String email);
//
//    /**
//     * @param map
//     * @return
//     */
//    @FormUrlEncoded
//    @PUT("api/v1/user/loginCredential")
//    Call<LoginResponse> login(@FieldMap HashMap<String, String> map);


    /**
     * Update location call.
     *
     * @param map           the map
     * @param authorization authenticate
     * @return the call
     */
    @FormUrlEncoded
    @POST(LOGIN)
    Call<TheResponse> login(@Header(AUTHORIZATION) String authorization, @FieldMap HashMap<String, String> map);

    /**
     * @return user
     */
//    @GET(USER_INFO)
//    Call<List<UserInfo>> getData();

    /**
     * @return integer val
     */
//    @GET(POST_HIT)
//    Call<List<PostData>> getPosts(@Query("userId") int userId);

    /**
     * @param authorization Access to the User Account
     * @param hashMap       HashMap tp user details
     * @return null
     */
    @FormUrlEncoded
    @PUT(VERIFY_OTP)
    Call<TheResponse> chckOtp(@Header(AUTHORIZATION) String authorization,
                              @FieldMap HashMap<String, String> hashMap);

    /**
     * @param authorization Access Token generated by the server at the time of registration
     * @return OTP Code
     */
    @PUT(RESEND_OTP)
    Call<TheResponse> resendOTP(@Header(AUTHORIZATION) String authorization);

    /**
     * @return array of json objects
     */
    @GET(PROFILE_CONSTANTS)
    Call<Response> getConstants();

    //  /**
    //   * @param auth       Access Token of the user
    //  * @param stepNumber Which number to skipped
    //  * @return Response from server
    //  */

    /**
     * /  * @param auth       Access Token of the user
     *
     * @param stepNumber Which number to skipped
     * @return Response from server
     */
    @PUT(SKIP_STEP)
    Call<Response> skipStep(@Header(AUTHORIZATION) String auth, @Field("stepNumber") int stepNumber);

    /**
     * @return list
     * @param auth authorization
     */
    @GET(CATEGORY_LIST)
    Call<Categories> getCategories(@Header(AUTHORIZATION) String auth);

}

